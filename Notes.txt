Digital Ocean

Create a droplet after having made an account and linking it to github to get the $100 credit.
On the top, click "create" -> "droplet"-> "ubuntu" -> "basic" -> "regular Intel with SSD" -> "$5/mo" -> "wherever is fine" -> "SSH keys" -> create temp key using steps below -> "1 droplet" -> "name that makes sense" -> Don't do backups because its not free. -> "create droplet"

cat id_rsa.pub | pbcopy

Create as RSA keys
mkdir ~/keys/digitalocean
cd ~/keys/digitalocean
ssh-keygen
id_rsa
passphrase? no

ssh -i id_rsa root@"whatever my ip address is"
"yes"

Register hostname at AWS -> Route53 -> "Registered domains" -> create a domain name that is available

Create a connection between the server ip and your domain name using DNS with "create record"->"A"->"Droplet IP address"->"define"

VisualStudioCode
^p helps you to search for things
^t helps you to search by file type
^shift-p this gives all the commands the computer knows about

Vi
i - insert - can type, leave with esc
:w -write (save)
:q -quit (exit the text editor)
:split the same file into two screens
:e edit - provide the file name
/ performs a search
:%s/<text to be changed>/<new text>
gg - go to top of text
dd - delete line
u - undoes what was does
:set number - this makes the line number appear



Html
anchor - "<a ref="2.html">Got to TWO</a>" when you click on this, it will open 2.html

<!DOCTYPE html>
<!-- HTML5 delcaration -->

<title>HTML INTRO</title>

<style> </style>
<h1> Top big heading </h1>
<p>
  If yo think this page is ugly, you should check out the 
  <a href="some other url">first public web page</a>.
</p>

Pre - Preformatted text - this lets the server know you don't want it to interpret certain section and to display them as they're written

Entity - a certain type of symbol that would usually change html (eg. "&lt;" for /)

Lists
  ordered vs unordered, whether or not it provides a number
  
<strong> tags tells you certain text should be more important, usually bold

Media

<img alt="Arches" src="https:/images.pexels.com:443/photos/164170/pexels-photo...jpg></img>

sudo certbot --nginx -d lab1.tycodra.com
"cd /etc/nginx/sites-available"
vim default and find server section for lab1.tycodra.com
after you have changed root, you'll need to reload nginx "sudo service nginx reload"


Git
git diff HEAD~1 HEAD~2 would show the differences between two commits
git commit -am "a message tied to the commit" -a means to add
git push - sends everything up to github
git fetch - shows what is going on when there is a discrepency between github and server
git rebase - puts the change on github prior to your new change as if it was originally in that order

ssh into server
cd source
git clone <git repo url>
cp -r . /var/www/lab1


D7 Git
Create repository on Github
Clone down from github. Github -> myServer
repo name "Portfolio"
Public
Add README
on server: "git clone <the copied gitrepo url>"


CSS basics
p { - change all of the paragraphs in my html to these specs
  background: blue;
  
  color:yellow;
  
 }
 * { margin:0;padding:0; } - this applies to everything
 h1 { color: red; } - only h1
 h1,h2 {} - changes to h1 and h2
 .<className> {} - changes to any element with the given class
 #id {} - a unique id for an element html- id="..."
 li[selected] {} - any list item that is selected
 div[title="life"] {} - 
 a:hover, a:visited {} - anchor, if you hover over it or click it, something happens
 h2:first-child {} - hierarchy, chooses the first child element that is contained in each h2
 section > p {} - 
 section p {} - all p's that are descendents
 
 Adding style to html
 Style attribute: <div style="color:red;">I'm red</div>
 Style element: <style> dive {color:red;} </stle>
 External file: <link rel="stylesheet" href="style.css" />
 
 Box model: [Margin[Border[Padding[content: 965x2235.920]Padding]Border]Margin]
 
 Responsive tools:
 <meta name="viewport"/>
 float:right
 display:grid
 display:flex
 @media
 
 External Display:
 block-newline (h1,p)
 inline - no top/bottom or height-width (span)
 none - hidden
 
 Internal Display:
 grid: box with grid display
 
 
 Design
 
 Simplicity - Don't crowd the page with crap. Focus on what the user is there for. 
 Consistency - Don't make users have to think too much. Make it easy. 
 
 Holy grail of design layouts
  App bar - top
  Nav - left
  footer - bottom
  settings - top right
  popout - right
  main - center
  
  You don't want to have too many font sizes. Aim for this ballpark of text sizes.
  Page title - 96 px
  Titles - 48-20px
  Text - 16px
  Secondary text - 14px
  Input - 16px
 
 Line length
  Opt for more narrow sections of text. Its easier for readers to follow.
  
 Utilize the site: marterial.io
  They have many design utilities that have been verified by intelligent individuals. Apparently.
  
 Typography
  Serif - have the little tails
  San serif - No little tails
  Monospace - There is the same size available for each character
  Handwriting - Funky little fonts that should be used sparingly
  Less fonts the better
  
 Color
  Come up with a color scheme first
  Material theme builder or Adobe Color or Paletton.com
  Primary, secondary, and focus
  
 Iconography
  Use standar icons - don't try and use a unique icon for something standard that no one would know.
  Google, bootstrap, font awesome - all have icons that we can use
  
 Images must add value - whatever you add, make sure it adds to the experience and applies
 Images should tell a story
 
 Whitespace
  Whitespace around text is easier on the eyes. It enables better focus. Often less is more with user experience.
  
 Navigation
  Sitemap - a structure that holds up your content and comprises the navigation of your site
  You don't want too many options, but make sure you have the main uses easily accessible.
  Display location - where am I?
  Browser controls - The buttons need to work with your website.
  Breadcrumbs - You want to be able to follow the path you traversed
  Anticipate common paths
  
  Search Engine Optimization
    Robots.txt - placed in the root of the website
    Tell the robots what they are allowed and disallowed to do. 
    Sitemap files - xml - gives location and when it was last modified
    
   Walls
    Dont build walls for your users - registration, paywall, login, sign-up, captcha, accept all cookies, etc.
    
   Internationalization
    Language, currency, times and dates, numbers, icons, images
    
   Animations
   
   Accessibility
    Visual - high contrast theme, screen reader support
    Audio - closed caption, visual animation
    Physical - keyboard navigation
    
   Interaction
    
   Performace
    Lighthouse - can check the performance of your website
    Don't use massive images
    
   GDPR - Privacy, HIPA - Health, SOC - Payment
   
   
  
  
